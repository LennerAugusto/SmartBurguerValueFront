@page "/administradores/cad"
@page "/administradores/edit/{Id:guid?}"

@using Blazored.Toast.Services
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using System.Security.Claims
@inject NavigationManager _nav
@inject HttpClient Http
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
<div class="d-flex flex-column justify-content-center align-items-center">
    @if (Id != null)
    {
        <h4 class="text-dark">Editar administrador</h4>
    }
    else
    {
        <h4 class="text-dark">Criar novo administrador</h4>
    }
    <div class="m-md-5 p-3 p-md-5 w-100" style="background-color: var(--white); border-radius:12px;">
        <div class="row">
            <div class="col-12 col-md-6">
                <RadzenFormField Text="Nome de usuário" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@User.UserName" />
                </RadzenFormField>
            </div>
            <div class="col-12 col-md-6">
                <RadzenFormField Text="Email" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@User.Email"/>
                </RadzenFormField>
            </div>
            @if (!IsUpdate)
            {
                <div class="col-12 col-md-6">
                    <RadzenFormField Text="Senha" Style="width: 100%">
                        <RadzenTextBox @bind-Value="@User.UserPassword" />
                    </RadzenFormField>
                </div>
            }
            <div class="col-12 col-md-6">
                <RadzenFormField Text="Número de telefone" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@User.PhoneNumber" />
                </RadzenFormField>
            </div>

        </div>
        <div class="d-flex flex-row justify-content-center w-100 mt-3">
            <RadzenButton Text="Salvar"
                          Click="@SaveUser" />
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid? Id { get; set; }
    public RegisterDTO User { get; set; } = new();
    public UpdateUserDTO UpdateUser { get; set; } = new();
    public AddUserRoleDTO UserRole { get; set; } = new();
    public bool IsUpdate { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            User = new RegisterDTO();
        }
        else
        {
            var baseUrl = Configuration["UrlApi"];
            try
            {
                var endpoint = $"{baseUrl}Auth/users/get-by-id?Id={Id}";
                User = await Http.GetFromJsonAsync<RegisterDTO>(endpoint) ?? new();
                if (User != null)
                    IsUpdate = true;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Erro ao buscar usuário: {ex.Message + Id}");
            }
        }

    }

    public async Task SaveUser()
    {
        if (IsUpdate)
        {
            UpdateUser.Id = Id;
            UpdateUser.UserName = User.UserName;
            UpdateUser.Email = User.Email;
            UpdateUser.PhoneNumber = User.PhoneNumber;

            var endpoint = $"{Configuration["UrlApi"]}Auth/users/update";
            var response = await Http.PutAsJsonAsync(endpoint, UpdateUser);

            if (response.IsSuccessStatusCode)
            {
                _toast.ShowSuccess("Usuário atualizado com sucesso!");
                _nav.NavigateTo("/administradores");
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                _toast.ShowError($"Erro ao atualizar usuário: {content}");
            }
        }
        else
        {
            var endpointRegister = $"{Configuration["UrlApi"]}Auth/register";
            var responseRegister = await Http.PostAsJsonAsync(endpointRegister, User);
            if (responseRegister.IsSuccessStatusCode)
            {
                UserRole.Email = User.Email;
                var endpointAddUserToRole = $"{Configuration["UrlApi"]}Auth/AddUserToRole?email={User.Email}&roleName={"Admin"}";
                var responseAddUserToRole = await Http.PostAsync(endpointAddUserToRole, null);


                if (responseAddUserToRole.IsSuccessStatusCode)
                {
                    _toast.ShowSuccess("Usuário criado com sucesso!");
                }
                _nav.NavigateTo("/administradores");
            }
            else
            {
                _toast.ShowError("Erro ao salvar usuário");
            }
        }
    }

}
