@page "/administradores"

@using Blazored.Toast.Services
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
@inject NavigationManager _nav

<div class="p-2 p-md-4">
    <h4>Lista de administradores</h4>

    <div class="mb-3 d-flex flex-row justify-content-between align-items-center gap-3 w-100">
        <RadzenTextBox @bind-Value="filterName" Placeholder="Buscar por nome..." Style="width:250px;" Change="OnFilterChanged" />
        <RadzenButton Text="Novo Administrador" Click="NavToCad" />
    </div>

    @if (isLoading)
    {
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="background-color: var(--orange)" />
    }
    else if (loadError)
    {
        <RadzenAlert Severity="AlertSeverity.Error">
            Erro ao carregar os dados da API.
        </RadzenAlert>
    }
    else
    {
        <RadzenDataGrid TItem="RegisterDTO" Data="@UsersFilter" ColumnWidth="200px"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ShowPagingSummary="true"
                        Style="box-shadow: 0 4px 12px rgba(0,0,0,0.1); border-radius: 12px;">
            <Columns>
                <RadzenDataGridColumn TItem="RegisterDTO" Property="UserName" Title="Nome" />
                <RadzenDataGridColumn TItem="RegisterDTO" Property="PhoneNumber" Title="Número de telefone" />
                <RadzenDataGridColumn TItem="RegisterDTO" Property="Email" Title="Email" />
                <RadzenDataGridColumn TItem="RegisterDTO" Title="Ações">
                    <Template Context="user">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Style="margin-right: 5px;" Click="() => EditUsers(user.Id)" />
                        <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="() => RemoveUser(user.Id)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
@code {
    private List<RegisterDTO> Users = new();
    private string filterName = "";
    private bool isLoading = true;
    private bool loadError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}Auth/users/get-all-admins";

            Users = await Http.GetFromJsonAsync<List<RegisterDTO>>(endpoint) ?? new();

            loadError = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
            loadError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<RegisterDTO> UsersFilter =>
        Users.Where(p => string.IsNullOrWhiteSpace(filterName) || p.UserName.Contains(filterName, StringComparison.OrdinalIgnoreCase));

    private void OnFilterChanged(string value) => filterName = value;

    private void EditUsers(Guid id)
    {
        _nav.NavigateTo($"/administradores/edit/{id}");
    }

    private async Task RemoveUser(Guid id)
    {
        string NewId = id.ToString();
        var baseUrl = Configuration["UrlApi"];
        var endpoint = $"{baseUrl}Auth/users/delete?id={NewId}";

        var response = await Http.DeleteAsync(endpoint);

        if (response.IsSuccessStatusCode)
        {
            _toast.ShowSuccess("Usuário deletado com sucesso!");
            Users = Users.Where(i => i.Id != id).ToList();
        }
        else
        {
            _toast.ShowError("Erro ao deletar usuário.");
        }
    }
    protected void NavToCad() => _nav.NavigateTo("/administradores/cad");
}
