@page "/combos"
@using ApexCharts
@using Blazored.Toast.Services
@using Constants
@using DTOs
@using DTOs.Analysis
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using SmartBurguerValueFront.Components.Inputs
@using SmartBurguerValueFront.Components.Modals
@using SmartBurguerValueFront.Components.buttons
@inject HttpClient Http
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
@inject NavigationManager _nav

<PageTitle>Combos</PageTitle>

<div class="p-2 p-md-4">
    <h4>Combos</h4>
    <div class="row align-items-stretch mb-3 g-2 g-md-3">
        <div class="col-12 col-md-2 d-flex flex-column">
            <div class="mb-3">
                <select class="form-select w-100"
                        @onchange="PeriodChanged"
                        style="border: none; text-align:start;">
                    <option value="@EPeriod.LastWeek">7 dias</option>
                    <option value="@EPeriod.LastFourWeeks">30 dias</option>
                    <option value="@EPeriod.LastSemester">6 meses</option>
                    <option value="@EPeriod.LastYear">12 meses</option>
                    <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                </select>
            </div>

            @if (MarginProfit != null && BestSellings.Any())
            {
                <div class="d-flex flex-column gap-2 flex-grow-1">
                    <div class="container-graphs d-flex flex-column align-items-center justify-content-center text-center w-100 p-3 flex-grow-1">
                        <img src="/img/icons/IconTicket.png" loading="lazy" alt="icone-ticket" style="width:35px;">
                        <span class="title-card-small mt-2">R$ @MarginProfit.Profit</span>
                        <p class="descritpion-card-small mb-0">Lucro com combos</p>
                    </div>

                    <div class="container-graphs d-flex flex-column align-items-center justify-content-center text-center w-100 p-3 flex-grow-1">
                        <img src="/img/icons/IconTicket.png" loading="lazy" alt="icone-ticket" style="width:35px;">
                        <span class="title-card-small mt-2">@MarginProfit.Margin %</span>
                        <p class="descritpion-card-small mb-0">Margem de Lucro</p>
                    </div>
                </div>
            }
        </div>
        <div class="col-12 col-md-5 d-flex">
            @if (BestSellings != null && BestSellings.Any())
            {
                <div class="container-graphs w-100 p-3 d-flex flex-column justify-content-center">
                    <ApexChart TItem="BestSellingProductsByPeriodDTO"
                               Title="Combos mais vendidos"
                               @key="SelectedPeriod">
                        <ApexPointSeries TItem="BestSellingProductsByPeriodDTO"
                                         Items="BestSellings"
                                         SeriesType="@SeriesType.Area"
                                         Name="Quantidade"
                                         XValue="@(e => $"{e.Label} - {e.NameProduct}")"
                                         YValue="@(e => e.Quantity)"
                                         Color="#FF7C01" />
                    </ApexChart>
                </div>
            }
        </div>
        <div class="col-12 col-md-5 col-lg-4 d-flex">
            @if (BestMargins != null && BestMargins.Any())
            {
                <div class="container-graphs w-100 p-3 d-flex flex-column justify-content-center">
                    <ApexChart TItem="GetBestMarginDTO"
                               Title="Produtos com melhores margem"
                               Options="chartOptions">
                        <ApexPointSeries TItem="GetBestMarginDTO"
                                         Items="BestMargins"
                                         SeriesType="SeriesType.Donut"
                                         Name="Gross Value"
                                         XValue="@(e => e.Name)"
                                         YValue="e => e.Margin"
                                         OrderByDescending="e=>e.Y" />
                    </ApexChart>
                </div>
            }
        </div>
    </div>

    <div class="mb-3 d-flex flex-row justify-content-between align-items-center gap-3 w-100">
        <InputTextFilterTabs Filter="@filterName" FilterChanged="OnFilterChanged" />
        <ButtonPrimary BackgroundColor="bg-orange" Text="Novo Produto" Url="/combos/cad" Icon="fas fa-plus icon-inside-input" />
    </div>

    @if (isLoading)
    {
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="background-color: var(--orange)" />
    }
    else if (loadError)
    {
        <RadzenAlert Severity="AlertSeverity.Error">
            Erro ao carregar os dados da API.
        </RadzenAlert>
    }
    else
    {
        <RadzenDataGrid TItem="ComboDTO" Data="@CombosFilter" ColumnWidth="200px"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ShowPagingSummary="true"
                        Style="box-shadow: 0 4px 12px rgba(0,0,0,0.1); border-radius: 12px;">
            <Columns>
                <RadzenDataGridColumn TItem="ComboDTO" Property="Name" Title="Nome" />
                <RadzenDataGridColumn TItem="ComboDTO" Title="Preço de venda">
                    <Template Context="combo">
                        R$ @(combo.SellingPrice)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ComboDTO" Title="Custo de produção">
                    <Template Context="combo">
                        R$ @(combo.CPV)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ComboDTO" Title="Status">
                    <Template Context="products">
                        @(products.IsActive ? "Ativo" : "Inativo")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ComboDTO" Title="Ações">
                    <Template Context="combo">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Style="margin-right: 5px;" Click="() => EditCombo(combo.Id)" />
                        <RadzenButton Icon="bar_chart" Size="ButtonSize.Small"
                                      Style="margin-right: 5px; background-color: var(--orange-light); color: var(--black); border: none"
                                      Click="() => ShowComboDetails(combo.Id)" />
                        <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="() => RemoveCombo(combo.Id)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
@code {
    private List<ComboDTO> Combos = new();
    private List<BestSellingProductsByPeriodDTO> BestSellings = new();
    public Guid? EnterpriseId { get; set; }
    private string filterName = "";
    private bool isLoading = true;
    private bool loadError = false;
    private EPeriod SelectedPeriod { get; set; } = EPeriod.LastWeek;
    private GetMarginProfitDTO MarginProfit { get; set; } = new();
    public List<GetBestMarginDTO> BestMargins { get; set; } = new();
    private ApexChartOptions<GetBestMarginDTO> chartOptions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EnterpriseId = await _auth.GetEnterpriseId();
            await GetDataGraphs();
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}combo/get-all/by-enterprise-id?EnterpriseId={EnterpriseId}";

            Combos = await Http.GetFromJsonAsync<List<ComboDTO>>(endpoint) ?? new();
            var endpointBestMargin = $"{baseUrl}analysis/products-best-margin/by-enterprise-id?EnterpriseId={EnterpriseId}";
            var response = await Http.PostAsync(endpointBestMargin, content: new StringContent(""));
            if (response.IsSuccessStatusCode)
            {
                BestMargins = await response.Content.ReadFromJsonAsync<List<GetBestMarginDTO>>() ?? new();
            }
            loadError = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
            loadError = true;
        }
        finally
        {
            isLoading = false;
        }
        chartOptions = new ApexChartOptions<GetBestMarginDTO>
        {
            Colors = new List<string> { "#FF6B1E", "#FDCEA1", "#FFEEE0", "#333333", "#858585" },
            Title = new Title { Align = Align.Center },
            Legend = new Legend { HorizontalAlign = Align.Center },
            Tooltip = new ApexCharts.Tooltip { Enabled = true, Y = new TooltipY { Formatter = "window.formatTooltip" } }
        };
    }

    private IEnumerable<ComboDTO> CombosFilter =>
     Combos.Where(p =>
         string.IsNullOrWhiteSpace(filterName) ||
         p.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase));

    private void OnFilterChanged(string value) => filterName = value;

    private void EditCombo(Guid id)
    {
        _nav.NavigateTo($"/combos/edit/{id}");
    }

    private async Task RemoveCombo(Guid id)
    {
        bool? confirmed = await DialogService.Confirm("Apagar um combo, altera seus balancetes financeiros e suas possibilidades de venda. Deseja realmente excluir?", "Confirmação");

        if (confirmed == true)
        {
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}combo/delete/{id}";

            var response = await Http.DeleteAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                _toast.ShowSuccess("Combo deletado com sucesso!");
                Combos = Combos.Where(i => i.Id != id).ToList();
            }
            else
            {
                _toast.ShowError("Erro ao deletar combo.");
            }
        }
        else
        {
            return;
        }
    }
    private async Task ShowComboDetails(Guid id)
    {
        _nav.NavigateTo($"/combos/detalhes/{id}");
    }
    private async Task PeriodChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<EPeriod>(e.Value?.ToString(), out var period))
        {
            BestSellings.Clear();
            SelectedPeriod = period;
            await GetDataGraphs();
            StateHasChanged();
        }

    }
    private async Task GetDataGraphs()
    {
        var analysisDto = new RequestAnalysisDTO
        {
            EnterpriseId = EnterpriseId.Value,
            Period = SelectedPeriod
        };
        var baseUrl = Configuration["UrlApi"];
        var endpointTicket = $"{baseUrl}analysis/get-margin-and-profit-combos/by-enterprise-id";
        var endpointBestSelling = $"{baseUrl}analysis/get-best-selling-combos/by-enterprise-id";
        var responseBestSelling = await Http.PostAsJsonAsync(endpointBestSelling, analysisDto);
        var responseTicket = await Http.PostAsJsonAsync(endpointTicket, analysisDto);
        if (responseTicket.IsSuccessStatusCode && responseBestSelling.IsSuccessStatusCode)
        {
            MarginProfit = await responseTicket.Content
                .ReadFromJsonAsync<GetMarginProfitDTO>() ?? new();
            BestSellings = await responseBestSelling.Content
                .ReadFromJsonAsync<List<BestSellingProductsByPeriodDTO>>() ?? new();
        }
    }
}
