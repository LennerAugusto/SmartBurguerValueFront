@page "/produto/detalhes/{Id:guid?}" 

@using DTOs
@using Radzen
@using SmartBurguerValueFront.Components.Cards
@using SmartBurguerValueFront.Components.Sections
@using SmartBurguerValueFront.Components.buttons
@inject HttpClient Http
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth


<div class="container-primary">
    <div class="row">
        <div class="col-12 col-md-8">
            <div class="bg-white p-3 p-md-4" style="border-radius:12px">
                @if(Product != null)
                {
                    <div style="aspect-ratio: 16/9; width: 50%; max-height: 300px; margin: 0 auto; border-radius: 12px;
                        background-color: @(string.IsNullOrEmpty(Product.ImageUrl) ? "#ccc" : "transparent");
                        background-image: @(string.IsNullOrEmpty(Product.ImageUrl) ? "none" : $"url('{Product.ImageUrl}')");
                        background-size: cover;
                        background-position: center;">
                    </div>

                    <div class="row mt-3">
                        <div class="col-12 col-md-8">
                            <div class="d-flex flex-column">
                                <h1 class="title-product text-black">@Product.Name</h1>
                                <p class="description-title">Descrição</p>
                                <p class="description">@Product.Description</p>
                                <p class="description-title">Custo do Produto</p>
                                <p class="description">R$ @Product.CPV</p>
                                <p class="description-title">Valor Sugerido</p>
                                <p class="description">R$ @Product.SuggestedPrice</p>
                                <SectionProductDetailInsights DesirredMargin="@Product.DesiredMargin" Margin="@Product.Margin" Markup="@Product.Markup" CMV="@Product.CMV" CPV="@Product.CPV" />
                            </div>
                        </div>
                        <div class="col-12 col-md-4">
                            <div class="d-flex flex-column justify-content-center gap-3">
                                <h3 class="title-product text-orange">@Product.SellingPrice</h3>
                                <CardIngredientsProductDetail Product="@Product" />
                                <ButtonPrimary Text="Editar Produto" BackgroundColor="bg-orange" Icon="fas fa-edit" Class="text-center" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-12 col-md-4">
            <div class="d-flex flex-column justify-content-center align-items-center">
                <h1 class="title-product mt-2 mt-md-0">Mais Produtos</h1>
                <div class="row">
                    @if(Products != null)
                    {
                        @foreach (var item in Products.Take(4))
                        {
                            <div class="col-12 col-lg-6 mt-3">
                                <CardProduct ItemProduct="@item" />
                            </div>
                        }
                    }
                </div>
                <div class="mt-3">
                    <ButtonPrimary Text="Ver Mais Produtos" BackgroundColor="bg-orange" Class="text-center" />
                </div>
            </div>

        </div>
    </div>
</div>
@* }
 *@
@code {
    [Parameter]
    public Guid Id { get; set; }
    [Parameter] public ProductCreateDTO Product { get; set; } = default!;
    public List<ProductsDTO> Products { get; set; } = new List<ProductsDTO>();
    private bool isLoading = true;
    private bool loadError = false;
    private Guid? EnterpriseId { get; set; }
    protected override async Task OnInitializedAsync()
    {
            try
            {
                EnterpriseId = await _auth.GetEnterpriseId();
                var baseUrl = Configuration["UrlApi"];
                var endpointProduct = $"{baseUrl}products/get-by-id/with-ingredients?ProductId={Id}";
                var endpointProducts = $"{baseUrl}products/get-all/by-enterprise-id?EnterpriseId={EnterpriseId}";

                Product = await Http.GetFromJsonAsync<ProductCreateDTO>(endpointProduct) ?? new();
                Products = await Http.GetFromJsonAsync<List<ProductsDTO>>(endpointProducts) ?? new List<ProductsDTO>();
                loadError = false;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
                loadError = true;
            }
            finally
            {
                isLoading = false;
            }
        StateHasChanged();
    }
}
