@page "/produtos"
@using Blazored.Toast.Services
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using SmartBurguerValueFront.Components.Inputs
@using SmartBurguerValueFront.Components.Modals
@using SmartBurguerValueFront.Components.buttons
@inject HttpClient Http
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
@inject NavigationManager _nav

<div class="p-2 p-md-4">
    <h4>Produtos</h4>

    <div class="mb-3 d-flex flex-row justify-content-between align-items-center gap-3 w-100">
        <InputTextFilterTabs Filter="@filterName" FilterChanged="OnFilterChanged" />
        <ButtonPrimary BackgroundColor="bg-orange" Text="Novo Produto" Url="/produtos/cad" Icon="fas fa-plus icon-inside-input" />
    </div>

    @if (isLoading)
    {
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="background-color: var(--orange)" />
    }
    else if (loadError)
    {
        <RadzenAlert Severity="AlertSeverity.Error">
            Erro ao carregar os dados da API.
        </RadzenAlert>
    }
    else
    {
        <RadzenDataGrid TItem="ProductsDTO" Data="@ProductsFilter" ColumnWidth="200px"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ShowPagingSummary="true"
                        Style="box-shadow: 0 4px 12px rgba(0,0,0,0.1); border-radius: 12px;">
            <Columns>
                <RadzenDataGridColumn TItem="ProductsDTO" Property="Name" Title="Nome" />
                <RadzenDataGridColumn TItem="ProductsDTO" Title="Preço de venda">
                    <Template Context="products">
                        R$ @(products.SellingPrice)
                    </Template>
                 </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductsDTO" Title="Custo de produção">
                    <Template Context="products">
                        R$ @(products.CPV)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductsDTO" Title="Status">
                    <Template Context="products">
                        @(products.IsActive ? "Ativo" : "Inativo")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductsDTO" Title="Ações">
                    <Template Context="products">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Style="margin-right: 5px;" Click="() => EditProduct(products.Id)" />
                        <RadzenButton Icon="bar_chart" Size="ButtonSize.Small"
                                      Style="margin-right: 5px; background-color: var(--orange-light); color: var(--black); border: none"
                                      Click="() => ShowProductDetails(products.Id)" />
                        <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="() => RemoveProduct(products.Id)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
@code {
    private List<ProductsDTO> Products = new();
    public Guid? EnterpriseId { get; set; }
    private string filterName = "";
    private bool isLoading = true;
    private bool loadError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EnterpriseId = await _auth.GetEnterpriseId();
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}products/get-all/by-enterprise-id?EnterpriseId={EnterpriseId}";

            Products = await Http.GetFromJsonAsync<List<ProductsDTO>>(endpoint) ?? new();

            loadError = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
            loadError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<ProductsDTO> ProductsFilter =>
     Products.Where(p =>
         string.IsNullOrWhiteSpace(filterName) ||
         p.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase));

    private void OnFilterChanged(string value) => filterName = value;

    private void EditProduct(Guid id)
    {
        _nav.NavigateTo($"/produtos/edit/{id}");
    }

    private async Task RemoveProduct(Guid id)
    {
        bool? confirmed = await DialogService.Confirm("Apagar um produto, altera seus balancetes financeiros e suas possibilidades de venda, caso não for mais utiliza-lo, recomendamos que desative-o. Deseja realmente excluir?", "Confirmação");

        if (confirmed == true)
        {
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}products/delete/{id}";

            var response = await Http.DeleteAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                _toast.ShowSuccess("Produto deletado com sucesso!");
                Products = Products.Where(i => i.Id != id).ToList();
            }
            else
            {
                _toast.ShowError("Erro ao deletar produto.");
            }
        }
        else
        {
            return;
        }
    }
    private async Task ShowProductDetails(Guid id)
    {
        _nav.NavigateTo($"/produto/detalhes/{id}");
    }

}
