@page "/"
@using ApexCharts
@using Constants
@using DTOs.Analysis
@using Microsoft.AspNetCore.Components.Authorization
@using SmartBurguerValueFront.Components.Cards
@using SmartBurguerValueRCL.Services.SmartBurguerValueRCL.Services
@inject CustomAuthStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject HttpClient Http
@inject EnterpriseProvider EnterpriseProvider
@*
<PageTitle>Home</PageTitle>

 <div class="p-2 p-md-4">
    <h4 class="text-dark">Dashboard</h4>
    <p style="color:var(--grey-30)">Olá @userName, bem-vindo de volta!</p>

    <div class="row">
        <div class="col-9 row">
            <div class="col-12 d-block d-md-none">
                <div class="col-12">
                    <select class="form-select"
                            @onchange="PeriodChanged"
                            style="border: none; text-align:start">
                        <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                        <option value="@EPeriod.LastYear">12 meses</option>
                        <option value="@EPeriod.LastSemester">6 meses</option>
                        <option value="@EPeriod.LastFourWeeks">30 dias</option>
                        <option value="@EPeriod.LastWeek">7 dias</option>
                    </select>

                </div>
            </div>

            @if (analysisHomeDTO != null)
            {
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/receipt.webp" TitleCard="Total de Pedidos" Number="@analysisHomeDTO.TotalOrders" />
                </div>
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/users.webp" TitleCard="Total em Gastos" Number="@analysisHomeDTO.TotalExpanses" IsValue />
                </div>
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/dollar.webp" TitleCard="Total em Vendas" Number="@analysisHomeDTO.TotalSales" ISValue />
                </div>
            }

            <div class="col-12">
                <div class="w-100 p-3" style="border-radius:10px; background-color: white;" >
                    @if (InvoicingSeries != null && InvoicingSeries.Any())
                    {
                        <ApexChart TItem="InvoicingSeriesDTO"
                                   Title="Comparativo de Faturamento"
                                   @key="SelectedPeriod">
                            <ApexPointSeries TItem="InvoicingSeriesDTO"
                                             Items="InvoicingSeries"
                                             SeriesType="@SeriesType.Area"
                                             Name="Faturamento Bruto"
                                             XValue="@(e => e.Label)"
                                             YValue="@(e => e.Invoicing)"
                                             Color="#FF7C01" />

                            <ApexPointSeries TItem="InvoicingSeriesDTO"
                                             Items="InvoicingSeries"
                                             SeriesType="@SeriesType.Area"
                                             Name="Faturamento Líquido"
                                             XValue="@(e => e.Label)"
                                             YValue="@(e => e.NetValue)"
                                             Color="#333333" />
                        </ApexChart>
                    }
                </div>
            </div>
        </div>

        <div class="col-3 d-none d-md-block">
            <select class="form-select"
                    @onchange="PeriodChanged"
                    style="border: none; text-align:start">
                <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                <option value="@EPeriod.LastYear">12 meses</option>
                <option value="@EPeriod.LastSemester">6 meses</option>
                <option value="@EPeriod.LastFourWeeks">30 dias</option>
                <option value="@EPeriod.LastWeek">7 dias</option>
            </select>

            @if (BestSellingProducts != null)
            {
                <h4 class="text-dark d-block d-flex flex-row justify-content-center my-3">Mais Vendidos:</h4>
                <div class="d-flex flex-column justify-content-center align-items-center">
                    @foreach (var item in BestSellingProducts.Take(6))
                    {
                        <div class="my-4 col-12 col-lg-6">
                            <CardProduct ItemHome="item" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div> *@
<PageTitle>Home</PageTitle>

<div class="p-2 p-md-4">
    <h4 class="text-dark">Dashboard</h4>
    <p style="color:var(--grey-30)">Olá @userName, bem-vindo de volta!</p>

    <div class="row">
        <div class="col-12 col-md-9">
            <div class="d-block d-md-none mb-3">
                <select class="form-select"
                        @onchange="PeriodChanged"
                        style="border: none; text-align:start">
                    <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                    <option value="@EPeriod.LastYear">12 meses</option>
                    <option value="@EPeriod.LastSemester">6 meses</option>
                    <option value="@EPeriod.LastFourWeeks">30 dias</option>
                    <option value="@EPeriod.LastWeek">7 dias</option>
                </select>
            </div>
            @if (analysisHomeDTO != null)
            {
                <div class="row mb-3">
                    <div class="col-12 col-md-4 mb-3">
                        <SumaryCardHome UrlIcon="img/icons/receipt.webp" TitleCard="Total de Pedidos" Number="@analysisHomeDTO.TotalOrders" />
                    </div>
                    <div class="col-12 col-md-4 mb-3">
                        <SumaryCardHome UrlIcon="img/icons/users.webp" TitleCard="Total em Gastos" Number="@analysisHomeDTO.TotalExpanses" IsValue />
                    </div>
                    <div class="col-12 col-md-4 mb-3">
                        <SumaryCardHome UrlIcon="img/icons/dollar.webp" TitleCard="Total em Vendas" Number="@analysisHomeDTO.TotalSales" ISValue />
                    </div>
                </div>
            }
            <div class="p-3 p-md-5" style="background-color: white; border-radius:12px;">
                @if (InvoicingSeries != null && InvoicingSeries.Any())
                {
                    <div class="m-2 m-md-4">
                        <ApexChart TItem="InvoicingSeriesDTO"
                                   Title="Comparativo de Faturamento"
                                   @key="SelectedPeriod"
                                    Height="400">
                            <ApexPointSeries TItem="InvoicingSeriesDTO"
                                             Items="InvoicingSeries"
                                             SeriesType="@SeriesType.Area"
                                             Name="Faturamento Bruto"
                                             XValue="@(e => e.Label)"
                                             YValue="@(e => e.Invoicing)"
                                             Color="#FF7C01" />

                            <ApexPointSeries TItem="InvoicingSeriesDTO"
                                             Items="InvoicingSeries"
                                             SeriesType="@SeriesType.Area"
                                             Name="Faturamento Líquido"
                                             XValue="@(e => e.Label)"
                                             YValue="@(e => e.NetValue)"
                                             Color="#333333" />
                        </ApexChart>
                    </div>
                }
            </div>
        </div>
        <div class="col-12 col-md-3">
            <div class="d-none d-md-block mb-3">
                <select class="form-select"
                        @onchange="PeriodChanged"
                        style="border: none; text-align:start">
                    <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                    <option value="@EPeriod.LastYear">12 meses</option>
                    <option value="@EPeriod.LastSemester">6 meses</option>
                    <option value="@EPeriod.LastFourWeeks">30 dias</option>
                    <option value="@EPeriod.LastWeek">7 dias</option>
                </select>
            </div>
            @if (BestSellingProducts != null && BestSellingProducts.Any())
            {
                <h4 class="text-dark text-center my-3">Mais Vendidos:</h4>
                <div class="d-flex flex-column justify-content-center align-items-center">
                    @foreach (var item in BestSellingProducts.Take(6))
                    {
                        <div class="my-4 col-12 col-lg-6">
                            <CardProduct ItemHome="item" />
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string? userName;
    private Guid? EnterpriseId;
    private EPeriod SelectedPeriod { get; set; } = EPeriod.SinceTheBeginning;
    private List<InvoicingSeriesDTO> InvoicingSeries { get; set; } = new();
    public List<BestSellingProductsDTO> BestSellingProducts { get; set; } = new();
    public AnalysisHomeDTO analysisHomeDTO { get; set; } = new AnalysisHomeDTO();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var Role = authState.User.IsInRole("Admin") ? "Admin" : "Enterprise";
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
            userName = user.Identity.Name;
        if (Role == "Admin")
        {
            EnterpriseId = await EnterpriseProvider.GetEnterpriseIdAsync();
            EnterpriseProvider.OnEnterpriseChanged += async (id) =>
            {
                EnterpriseId = id;
                await LoadInitialized();
                StateHasChanged();
            };
        }
        else
        {
            EnterpriseId = await AuthenticationStateProvider.GetEnterpriseId();
        }

        await LoadInitialized();
    }

    private async Task PeriodChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<EPeriod>(e.Value?.ToString(), out var period))
        {
            InvoicingSeries.Clear();
            SelectedPeriod = period;
            await LoadInitialized();
            StateHasChanged();
        }
    }

    public async Task LoadInitialized()
    {
        if (!EnterpriseId.HasValue) return;

        var analysisDto = new RequestAnalysisDTO
        {
            EnterpriseId = EnterpriseId.Value,
            Period = SelectedPeriod
        };

        var baseUrl = Configuration["UrlApi"];
        var endpoint = $"{baseUrl}analysis/best-selling-products/by-enterprise-id";
        var endpointAnalysis = $"{baseUrl}analysis/analysis-home/get-all";
        var endpointInvoicing = $"{baseUrl}analysis/invoicing/by-enterprise-id";
        try
        {
            var response = await Http.PostAsJsonAsync(endpoint, analysisDto);
            var responseAnalysis = await Http.PostAsJsonAsync(endpointAnalysis, analysisDto);
            var responseInvoicing = await Http.PostAsJsonAsync(endpointInvoicing, analysisDto);

            if (response.IsSuccessStatusCode && responseAnalysis.IsSuccessStatusCode && responseInvoicing.IsSuccessStatusCode)
            {
                BestSellingProducts = await response.Content
                    .ReadFromJsonAsync<List<BestSellingProductsDTO>>() ?? new();
                analysisHomeDTO = await responseAnalysis.Content
                    .ReadFromJsonAsync<AnalysisHomeDTO>() ?? new();
                InvoicingSeries = await responseInvoicing.Content
                    .ReadFromJsonAsync<List<InvoicingSeriesDTO>>() ?? new();
            }
            else
            {
                Console.Error.WriteLine("Erro ao buscar dados da API.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
        }
    }
}
