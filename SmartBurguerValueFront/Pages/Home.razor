@page "/"
@using ApexCharts
@using Constants
@using DTOs.Analysis
@using Microsoft.AspNetCore.Components.Authorization
@using SmartBurguerValueFront.Components.Cards
@inject CustomAuthStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<div class="p-2 p-md-4">
    <h4 class="text-dark">Dashboard</h4>
    <p style="color:var(--grey-30)">Olá @userName, bem-vindo de volta!</p>
    <div class="row">
        <div class="col-9 row">
            <div class="col-12 d-block d-md-none">
                <div class="col-12">
                    <select class="form-select" @bind="SelectedPeriod" style="border: none; text-align:start">
                        <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                        <option value="@EPeriod.LastYear">12 meses</option>
                        <option value="@EPeriod.LastSemester">6 meses</option>
                        <option value="@EPeriod.LastFourWeeks">30 dias</option>
                        <option value="@EPeriod.LastWeek">7 dias</option>
                    </select>
                </div>
            </div>
            @if(analysisHomeDTO != null)
            {
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/receipt.webp" TitleCard="Total de Pedidos" Number="@analysisHomeDTO.TotalOrders" />
                </div>
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/users.webp" TitleCard="Total em Gastos" Number="@analysisHomeDTO.TotalExpanses" IsValue />
                </div>
                <div class="col-12 col-md-4 mb-3">
                    <SumaryCardHome UrlIcon="img/icons/dollar.webp" TitleCard="Total em Vendas" Number="@analysisHomeDTO.TotalSales" ISValue />
                </div>
            }
            <div class="col-12">
                <ApexChart TItem="Order" Title="Basic Sample">

                    <ApexPointSeries TItem="Order"
                    Items="orders"
                    SeriesType="@SeriesType.Area"
                    Name="Gross Value"
                    XValue="@(e => e.Country)"
                    YAggregate="@(e => e.Sum(e => e.GrossValue))"
                    OrderByDescending="e => e.Y" />

                    <ApexPointSeries TItem="Order"
                    Items="orders"
                    SeriesType="@SeriesType.Area"
                    Name="Net Value"
                    XValue="@(e => e.Country)"
                    YAggregate="@(e => e.Sum(e => e.NetValue))"
                    OrderByDescending="e => e.Y" />
                </ApexChart>
            </div>
        </div>
        <div class="col-3 d-block d-md-block">
            <select class="form-select"
                    @onchange="PeriodChanged"
                    style="border: none; text-align:start">
                <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                <option value="@EPeriod.LastYear">12 meses</option>
                <option value="@EPeriod.LastSemester">6 meses</option>
                <option value="@EPeriod.LastFourWeeks">30 dias</option>
                <option value="@EPeriod.LastWeek">7 dias</option>
            </select>
            @if (BestSellingProducts != null)
            {
                <h4 class="text-dark d-block d-flex flex-row justify-content-center my-3">Mais Vendidos:</h4>
                @foreach (var item in BestSellingProducts.Take(6))
                {
                    <div class="my-4">
                        <CardProduct ItemHome="item" />
                    </div>
                }
            }
          
        </div>
    </div>
</div>




@code {
    private bool isLoading = true;
    private bool loadError = false;
    private string? userName;
    public Guid? EnterpriseId { get; set; } 
    public List<BestSellingProductsDTO> BestSellingProducts { get; set; } = new();
    public AnalysisHomeDTO analysisHomeDTO { get; set; } = new AnalysisHomeDTO();
    private EPeriod SelectedPeriod { get; set; } = EPeriod.SinceTheBeginning;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userName = user.Identity.Name;
        }
        await LoadInitialized();

    }
    private async Task PeriodChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<EPeriod>(e.Value?.ToString(), out var period))
        {
            SelectedPeriod = period;
            int periodNumber = (int)SelectedPeriod;
            Console.WriteLine($"Período selecionado em número: {periodNumber}");

            await LoadInitialized();
        }
    }

    public async Task LoadInitialized()
    {
        try
        {
            EnterpriseId = await AuthenticationStateProvider.GetEnterpriseId();

            var analysisDto = new RequestAnalysisDTO
                {
                    EnterpriseId = EnterpriseId,
                    Period = SelectedPeriod
                };

            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}analysis/best-selling-products/by-enterprise-id";
            var endpointAnalysis = $"{baseUrl}analysis/analysis-home/get-all";

            var response = await Http.PostAsJsonAsync(endpoint, analysisDto);
            var responseAnalysis = await Http.PostAsJsonAsync(endpointAnalysis, analysisDto);

            if (response.IsSuccessStatusCode && responseAnalysis.IsSuccessStatusCode)
            {
                BestSellingProducts = await response.Content.ReadFromJsonAsync<List<BestSellingProductsDTO>>() ?? new();
                analysisHomeDTO = await responseAnalysis.Content.ReadFromJsonAsync<AnalysisHomeDTO>() ?? new();
                loadError = false;
            }
            else
            {
                loadError = true;
                var errorMsg = await response.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Erro da API: {errorMsg}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
            loadError = true;
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    public class Order
    {
        public string Country { get; set; } = string.Empty;
        public decimal GrossValue { get; set; }
        public decimal NetValue { get; set; }
    }

    private List<Order> orders = new()
    {
        new Order { Country = "Brasil", GrossValue = 1000, NetValue = 850 },
        new Order { Country = "EUA", GrossValue = 1500, NetValue = 1400 },
        new Order { Country = "Alemanha", GrossValue = 800, NetValue = 700 },
        new Order { Country = "Japão", GrossValue = 1200, NetValue = 950 }
    };
}
