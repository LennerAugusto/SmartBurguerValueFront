@page "/compras"
@using ApexCharts
@using Blazored.Toast.Services
@using Constants
@using DTOs
@using DTOs.Analysis
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using SmartBurguerValueAPI.DTOs.Analysis
@using SmartBurguerValueFront.Components.Inputs
@using SmartBurguerValueFront.Components.Modals
@using SmartBurguerValueFront.Components.buttons
@inject HttpClient Http
@inject DialogService DialogService
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
@inject NavigationManager _nav

<PageTitle>Compras</PageTitle>
<div class="p-2 p-md-4">
    <h4>Compras de produtos e insumos</h4>
    <div class="row align-items-stretch mb-3 g-2 g-md-3">
        <div class="col-12 col-md-2 d-flex flex-column">
            <div class="mb-3">
                <select class="form-select w-100"
                        @onchange="PeriodChanged"
                        style="border: none; text-align:start;">
                    <option value="@EPeriod.LastWeek">7 dias</option>
                    <option value="@EPeriod.LastFourWeeks">30 dias</option>
                    <option value="@EPeriod.LastSemester">6 meses</option>
                    <option value="@EPeriod.LastYear">12 meses</option>
                    <option value="@EPeriod.SinceTheBeginning">Desde o início</option>
                </select>
            </div>

            @if (DetailPurchases != null)
            {
                <div class="d-flex flex-column gap-2 flex-grow-1">
                    <div class="container-graphs d-flex flex-column align-items-center justify-content-center text-center w-100 p-3 flex-grow-1">
                        <img src="/img/icons/IconTicket.png" loading="lazy" alt="icone-ticket" style="width:35px;">
                        <span class="title-card-small mt-2">R$ @DetailPurchases.TotalSpent</span>
                        <p class="descritpion-card-small mb-0">Total Gastos</p>
                    </div>

                    <div class="container-graphs d-flex flex-column align-items-center justify-content-center text-center w-100 p-3 flex-grow-1">
                        <img src="/img/icons/IconTicket.png" loading="lazy" alt="icone-ticket" style="width:35px;">
                        <span class="title-card-small mt-2">R$@DetailPurchases.ProjectedExpensesNextMonth</span>
                        <p class="descritpion-card-small mb-0">Projeção de gastos para o próximo mês</p>
                    </div>
                </div>
            }
        </div>
        <div class="col-12 col-md-7 d-flex">
             @if (TotalSpend != null && TotalSpend.Any())
                {
                    <div class="w-100">
                    <ApexChart TItem="GetTotalSpendDTO"
                               Title="Total gasto em compras"
                               @key="SelectedPeriod"
                               Height="400"
                               Options="chartOptions">

                        <ApexPointSeries TItem="GetTotalSpendDTO"
                                         Items="TotalSpend"
                                         Name="Valor"
                                         XValue="@(e => e.Label)"
                                         YAggregate="@(e => e.Sum(e => e.Orders))"
                                         OrderByDescending="e=>e.Y"
                                         SeriesType="SeriesType.Line"
                                         Color="#FF6B1E" />
                    </ApexChart>
                    </div>
                }

        </div>
        <div class="col-12 col-md-3 d-flex">
            @if (DetailPurchases != null)
            {
                var count = 1;
                <div class="d-flex flex-column gap-2 flex-grow-1">
                    <div class="container-graphs d-flex flex-column align-items-center justify-content-center text-center w-100 p-3 flex-grow-1">
                        <img src="/img/icons/IconTicket.png" loading="lazy" alt="icone-ticket" style="width:35px;">
                        <span class="title-card-small mt-2">Top Fornecedores</span>
                        <div class="text-start mt-1 mt-md-2">
                            @foreach (var item in DetailPurchases.TopSuppliers)
                            {
                                <p class="descritpion-card-small mb-0 mt-1">@count º - @item</p>
                                count++;
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="mb-3 d-flex flex-row justify-content-between align-items-center gap-3 w-100">
        <InputTextFilterTabs Filter="@filterName" FilterChanged="OnFilterChanged" />
        <ButtonPrimary BackgroundColor="bg-orange" Text="Nova Compra" Url="/compras/cad" Icon="fas fa-plus icon-inside-input" />
    </div>

    @if (isLoading)
    {
        <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" Style="background-color: var(--orange)" />
    }
    else if (loadError)
    {
        <RadzenAlert Severity="AlertSeverity.Error">
            Erro ao carregar os dados da API.
        </RadzenAlert>
    }
    else
    {
        <RadzenDataGrid TItem="PurchasesDTO" Data="@PurchasesFilter" ColumnWidth="200px"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ShowPagingSummary="true"
                        Style="box-shadow: 0 4px 12px rgba(0,0,0,0.1); border-radius: 12px;">
            <Columns>
                <RadzenDataGridColumn TItem="PurchasesDTO" Title="Data da Compra">
                    <Template Context="purchases">
                        @purchases.PurchaseDate.ToString("dd/MM/yyyy")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PurchasesDTO" Title="Valor">
                    <Template Context="purchases">
                        R$ @purchases.TotalAmount.ToString("N2")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PurchasesDTO" Property="SupplierName" Title="Nome do Fornecedor" />
                <RadzenDataGridColumn TItem="PurchasesDTO" Title="Status">
                    <Template Context="purchases">
                        @(purchases.IsActive ? "Ativo" : "Inativo")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PurchasesDTO" Title="Ações">
                    <Template Context="purchases">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Style="margin-right: 5px;" Click="() => EditPurchase(purchases.Id)" />
                        <RadzenButton Icon="bar_chart" Size="ButtonSize.Small"
                                      Style="margin-right: 5px; background-color: var(--orange-light); color: var(--black); border: none"
                                      Click="() => ShowPurchaseDetails(purchases.Id)" />
                        <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="() => RemovePurchase(purchases.Id)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>
@code {
    private List<PurchasesDTO> Purchases = new();
    private List<GetTotalSpendDTO> TotalSpend = new();
    private GetPurchaseDetailsDTO? DetailPurchases { get; set; }
    public Guid? EnterpriseId { get; set; }
    private string filterName = "";
    private bool isLoading = true;
    private bool loadError = false;
    private EPeriod SelectedPeriod { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            EnterpriseId = await _auth.GetEnterpriseId();
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}purchase/get-all/by-enterprise-id?EnterpriseId={EnterpriseId}";

            Purchases = await Http.GetFromJsonAsync<List<PurchasesDTO>>(endpoint) ?? new();

            await GetDataGraphs();
            loadError = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar dados da API: {ex.Message}");
            loadError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private IEnumerable<PurchasesDTO> PurchasesFilter =>
    Purchases.Where(p =>
    string.IsNullOrWhiteSpace(filterName) ||
    p.PurchaseDate.ToString("dd/MM/yyyy").Contains(filterName, StringComparison.OrdinalIgnoreCase));

    private void OnFilterChanged(string value) => filterName = value;

    private void EditPurchase(Guid id)
    {
        _nav.NavigateTo($"/compras/edit/{id}");
    }

    private async Task RemovePurchase(Guid id)
    {
        bool? confirmed = await DialogService.Confirm("Apagar uma compra, altera seus balancetes financeiros. Deseja realmente excluir?", "Confirmação");

        if (confirmed == true)
        {
            var baseUrl = Configuration["UrlApi"];
            var endpoint = $"{baseUrl}purchase/delete/{id}";

            var response = await Http.DeleteAsync(endpoint);

            if (response.IsSuccessStatusCode)
            {
                _toast.ShowSuccess("Compra deletada com sucesso!");
                Purchases = Purchases.Where(i => i.Id != id).ToList();
            }
            else
            {
                _toast.ShowError("Erro ao deletar compra.");
            }
        }
        else
        {
            return;
        }
    }
    private async Task ShowPurchaseDetails(Guid purchaseId)
    {
        await DialogService.OpenAsync<PurchaseDetailsModal>(
        "Detalhes da Compra",
        new Dictionary<string, object>() { { "PurchaseId", purchaseId } },
        new DialogOptions()
        {
            Width = "600px",
            Height = "auto",
            Resizable = true,
            Draggable = false,
            CloseDialogOnEsc = true
        });
    }
    private async Task PeriodChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<EPeriod>(e.Value?.ToString(), out var period))
        {
            SelectedPeriod = period;
            TotalSpend.Clear();
            await GetDataGraphs();
            StateHasChanged();
        }
    }
    private async Task GetDataGraphs()
    {
        var analysisDto = new RequestAnalysisDTO
        {
            EnterpriseId = EnterpriseId.Value,
            Period = SelectedPeriod
        };
        var baseUrl = Configuration["UrlApi"];
        var endpointProductsDetails = $"{baseUrl}analysis/purchase-details/by-enterprise-id";
        var endpointTotalSpend = $"{baseUrl}analysis/purchase-expanse/by-enterprise-id";
        var responseProductsDetails = await Http.PostAsJsonAsync(endpointProductsDetails, analysisDto);
        var responseTotalSpend = await Http.PostAsJsonAsync(endpointTotalSpend, analysisDto);
        if (responseProductsDetails.IsSuccessStatusCode && responseTotalSpend.IsSuccessStatusCode)
        {
            DetailPurchases = await responseProductsDetails.Content
                .ReadFromJsonAsync<GetPurchaseDetailsDTO>();
            TotalSpend = await responseTotalSpend.Content
                .ReadFromJsonAsync<List<GetTotalSpendDTO>>() ?? new();
        }
    }
    ApexChartOptions<GetTotalSpendDTO> chartOptions = new()
    {
        PlotOptions = new PlotOptions
        {
            Bar = new PlotOptionsBar
            {
                BorderRadiusApplication = BorderRadiusApplication.End,
            }
        },
        DataLabels = new DataLabels { Enabled = false }
    };

}
