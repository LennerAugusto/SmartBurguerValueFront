@page "/ingredientes/cad"
@page "/ingredientes/edit/{Id:guid?}"

@using Blazored.Toast.Services
@using DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using SmartBurguerValueFront.Components.Inputs
@using System.Security.Claims
@using SmartBurguerValueFront.Components.buttons
@inject NavigationManager _nav
@inject HttpClient Http
@inject IConfiguration Configuration
@inject CustomAuthStateProvider _auth
@inject IToastService _toast
<div class="d-flex flex-column justify-content-center align-items-center p-4">
    @if (Id != null)
    {
        <h4 class="text-dark">Editar ingrediente</h4>
    }
    else
    {
        <h4 class="text-dark">Criar novo ingrediente</h4>
    }
    <div class="m-md-5 p-3 p-md-5 w-100" style="background-color: var(--white); border-radius:12px;">
        <div class="row">
            <div class="col-12 col-md-6">
                <RadzenFormField Text="Nome" Style="width: 100%">
                    <RadzenTextBox @bind-Value="@Ingredient.Name" />
                </RadzenFormField>
            </div>
            <div class="col-12 col-md-6">
                <RadzenFormField Text="Tipo de Compra" Style="width: 100%">
                    <SelectPrimary TItem="UnitTypesDTO"
                    Options="UnitTypes"
                    GetText="p => p.Name"
                    GetValue="p => p.Id"
                    OnSelectedChanged="OnSelecionadoChanged"
                    Bg="bg-transparent" />
                </RadzenFormField>
            </div>
            <div class="col-12 py-3">
                <label style="display: flex; justify-content:center; align-items: center;">
                    <RadzenCheckBox @bind-Value="Ingredient.IsActive" />
                    <span style="margin-left: 8px;">Ativo ?</span>
                </label>
            </div>
        </div>
        <div class="d-flex flex-row justify-content-center w-100">
            <ButtonPrimary
            Text="Salvar"
            BackgroundColor="bg-orange"
            OnClick="@SaveIngredient" />
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Guid? Id { get; set; }

    public IngredientsDTO Ingredient { get; set; } = new();
    public List<UnitTypesDTO> UnitTypes { get; set; } = new();
    public Guid SelectedUnitTypeId { get; set; }
    public Guid? EnterpriseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EnterpriseId = await _auth.GetEnterpriseId();
        var baseUrl = Configuration["UrlApi"];    
        try
        {
            var endpoint = $"{baseUrl}unit-types/get-all/";
            UnitTypes = await Http.GetFromJsonAsync<List<UnitTypesDTO>>(endpoint) ?? new();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao buscar unit types: {ex.Message}");
        }
        if (Id == null)
        {
            Ingredient = new IngredientsDTO();
        }
        else
        {
            try
            {
                var endpoint = $"{baseUrl}ingredient/get-by-id?IngredientId={Id}";
                Ingredient = await Http.GetFromJsonAsync<IngredientsDTO>(endpoint) ?? new();
                SelectedUnitTypeId = Ingredient.UnitOfMeasureId;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Erro ao buscar ingrediente: {ex.Message + Id}");
            }
        }
    }

    void OnSelecionadoChanged(Guid id)
    {
        SelectedUnitTypeId = id;
    }
    public async Task SaveIngredient()
    {
        if (SelectedUnitTypeId == null || string.IsNullOrWhiteSpace(Ingredient.Name))
        {
            _toast.ShowError("Preencha todos os campos");
            return;
        }
        else
        {
            if (Id == null)
            {
                Ingredient.UnitOfMeasureId = SelectedUnitTypeId;
                Ingredient.EnterpriseId = EnterpriseId;
                var endpoint = $"{Configuration["UrlApi"]}ingredient/create";
                var response = await Http.PostAsJsonAsync(endpoint, Ingredient);
                if (response.IsSuccessStatusCode)
                {
                    _toast.ShowSuccess("Ingrediente salvo com sucesso!");
                    _nav.NavigateTo("/ingredientes");
                }
                else
                {
                    _toast.ShowError("Erro ao salvar ingrediente.");
                }
            }
            else
            {
                Ingredient.UnitOfMeasureId = SelectedUnitTypeId;
                var endpoint = $"{Configuration["UrlApi"]}ingredient/update";
                var response = await Http.PutAsJsonAsync(endpoint, Ingredient);
                if (response.IsSuccessStatusCode)
                {
                    _toast.ShowSuccess("Ingrediente salvo com sucesso!");
                    _nav.NavigateTo("/ingredientes");
                }
                else
                {
                    _toast.ShowError("Erro ao salvar ingrediente.");
                }
            }
        }

    }
}
