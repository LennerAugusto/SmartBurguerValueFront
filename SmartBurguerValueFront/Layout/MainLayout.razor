@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
@inherits LayoutComponentBase
@inject CustomAuthStateProvider AuthProvider
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4 auth" style="background-color:var(--orange-background)!important;">
                    <LoginDisplay />
                    <button class="btn btn-sm btn-danger ms-2" @onclick="Logout">Sair</button>
                </div>

                <article class="content px-4 bg-orange-background h-100">
                    <RadzenDialog />

                    @Body
                </article>
                <footer><Footer /></footer>
            </main>
        </div>
    </Authorized>

    <NotAuthorized>
        <p>Você não tem permissão para acessar essa página.</p>
        <RedirectToLogin/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task Logout()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrWhiteSpace(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwt = handler.ReadJwtToken(token);
            var username = jwt.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Name || c.Type == "sub")?.Value;

            if (!string.IsNullOrWhiteSpace(username))
            {
                await Http.PostAsync($"api/auth/revoke/{username}", null);
            }
        }

        await JS.InvokeVoidAsync("localStorage.removeItem", "authToken");

        AuthProvider.NotifyUserLogout();

        Navigation.NavigateTo("/", forceLoad: true);
    }
}
