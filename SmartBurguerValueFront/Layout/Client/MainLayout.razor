@using Microsoft.AspNetCore.Components.Authorization
@using Radzen.Blazor
@using SmartBurguerValueFront.Components.Sections
@using SmartBurguerValueRCL.Services.SmartBurguerValueRCL.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthProvider
@inject IJSRuntime JS
@inject HttpClient Http
@inject EnterpriseProvider EnterpriseProvider

<AuthorizeView>
    <Authorized>
        <div class="page">
            <div class="sidebar">
                <NavMenu />
            </div>
            <main>
                <div class="top-row px-4 auth d-flex flex-row justify-content-end align-items-center" style="background-color:var(--orange-background)!important;">
                    <LoginDisplay />
                    @if (IsAdmin)
                    {
                        <SectionSelectEnterpriseId OnEnterpriseSelected="OnEnterpriseSelected" />
                    }
                </div>

                <article class="content px-4 bg-orange-background h-100">
                    <RadzenDialog />
                    @if (IsAdmin && !EnterpriseLoaded)
                    {
                        <p>Carregando dados da construtora...</p>
                    }
                    else
                    {
                        @Body
                    }
                </article>
                <footer><Footer /></footer>
            </main>
        </div>
    </Authorized>

    <NotAuthorized>
        <p>Você não tem permissão para acessar essa página.</p>
        <RedirectToLogin />
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool IsAdmin { get; set; }
    private bool EnterpriseLoaded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.IsInRole("Admin");
        EnterpriseProvider.OnEnterpriseChanged += (id) =>
        {
            if(id == null && IsAdmin)
            {
                EnterpriseLoaded = false;
                StateHasChanged();
                return;
            }
            StateHasChanged();
        };
    }

    private void OnEnterpriseSelected()
    {
        EnterpriseLoaded = true;
        StateHasChanged();
    }
}
