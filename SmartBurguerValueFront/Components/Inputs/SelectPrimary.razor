@typeparam TItem
<div class="select-wrapper">
    <select class="select-primary-container @Bg" @onchange="OnChange">
        @if (Options != null)
        {
            <option disabled selected hidden>@Label</option>
            @foreach (var item in Options)
            {
                <option value="@GetValue(item)">
                    @GetText(item)
                </option>
            }
        }
    </select>
    <i class="fa-solid fa-chevron-down select-icon"></i>
</div>


@code {
    [Parameter]
    public string Bg { get; set; }
    [Parameter]
    public IEnumerable<TItem> Options { get; set; }

    [Parameter]
    public Func<TItem, string> GetText { get; set; }

    [Parameter]
    public Func<TItem, Guid> GetValue { get; set; }

    [Parameter]
    public EventCallback<Guid> OnSelectedChanged { get; set; }
    [Parameter]
    public string Label { get; set; }
    private async Task OnChange(ChangeEventArgs e)
    {
        if (Guid.TryParse(e.Value?.ToString(), out Guid guid))
        {
            await OnSelectedChanged.InvokeAsync(guid);
        }
    }
}
